{"version":3,"sources":["webpack:///./src/pages/taskat.js"],"names":["SeedaProject","data","className","fluid","taskatpostHeader","childImageSharp","alt","cycle","companion","calendar","day","task","href","query"],"mappings":"4FAAA,+HAoQeA,UA7PM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0BAAMC,UAAU,oBAElB,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CACEC,MAAOF,EAAKG,iBAAiBC,gBAAgBF,MAC7CG,IAAI,2BACJJ,UAAU,YAId,yBAAKA,UAAU,oBACb,sCACA,0EAGF,yBAAKA,UAAU,gBACb,6BACE,uCACA,sDAEF,6BACE,4CACA,+FAGF,6BACE,wCACA,yCAEF,6BACE,wCACA,uDAEF,6BACE,qCACA,sCAIJ,iCACE,yBAAKA,UAAU,cACb,sDACA,sRAOA,oRAOA,uCACA,4EACiD,IAC/C,oDAFF,4GAOA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOF,EAAKM,MAAMF,gBAAgBF,MAClCG,IAAI,0BAGR,6DAGF,6BAASJ,UAAU,gBACjB,yBAAKA,UAAU,cACb,uCAEA,2BACE,wCADF,0MAMA,2BACE,oCADF,uHAKA,2BACE,2CADF,0GAKA,wTAUJ,iCACE,yBAAKA,UAAU,cACb,wCACA,mJAE8D,IAF9D,cAGa,uEAHb,sCAOA,wdAUA,2HAEiC,oDAFjC,0KAK2C,IACzC,8GANF,IAWE,kBAAC,IAAD,CACEC,MAAOF,EAAKO,UAAUH,gBAAgBF,MACtCG,IAAI,8BACJJ,UAAU,gBAEZ,wJAMF,qbAYJ,yBAAKA,UAAU,cACb,iDACA,yOAIE,qCAJF,KAIiB,uCAJjB,KAIkC,uCAJlC,QAIsD,sCAAe,IAJrE,uDASF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,2HAEkC,uCAFlC,gGAImB,IACjB,sGALF,KAYA,kBAAC,IAAD,CACEC,MAAOF,EAAKQ,SAASJ,gBAAgBF,MACrCG,IAAI,6BAKV,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CACEC,MAAOF,EAAKS,IAAIL,gBAAgBF,MAChCG,IAAI,sBAGN,sRAIsD,IACpD,kDALF,qGAWJ,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,cACb,yUAOA,kBAAC,IAAD,CACEC,MAAOF,EAAKU,KAAKN,gBAAgBF,MACjCG,IAAI,kCAKV,yBAAKJ,UAAU,cACb,oEACA,4jBAYA,uBACEU,KAAK,mGACLV,UAAU,iBAFZ,uBAcH,IAAMW,EAAK","file":"component---src-pages-taskat-js-ed1b9d20e109e2654806.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport { Helmet } from \"react-helmet\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport ImageZoom from \"../components/ImageZoom\"\n\nconst SeedaProject = ({ data }) => {\n  return (\n    <Layout>\n      <Helmet>\n        <body className=\"taskat-project\" />\n      </Helmet>\n      <div className=\"project-header\">\n        <Img\n          fluid={data.taskatpostHeader.childImageSharp.fluid}\n          alt=\"taskat project home page\"\n          className=\"header\"\n        />\n      </div>\n\n      <div className=\"wrap-small title\">\n        <h1>TasKat</h1>\n        <h2>Helping parents and children manage tasks</h2>\n      </div>\n\n      <div className=\"project-info\">\n        <div>\n          <h2>Context</h2>\n          <p>Academic Group Project</p>\n        </div>\n        <div>\n          <h2>Team Members</h2>\n          <p>Team members: Chell Li, Dennis Limbo, Tracy Chen, Timothy Tembo</p>\n        </div>\n\n        <div>\n          <h2>Timeline</h2>\n          <p>One month</p>\n        </div>\n        <div>\n          <h2>My roles</h2>\n          <p>UI/UX Design, Research </p>\n        </div>\n        <div>\n          <h2>Tools</h2>\n          <p>Figma</p>\n        </div>\n      </div>\n\n      <section>\n        <div className=\"wrap-small\">\n          <h3>Overview and objective</h3>\n          <p>\n            This group project is a design proposal for an advanced\n            human-computer interaction course. We identified issues that\n            parents/guardians and children have been dealing with since the\n            COVID-19 pandemic and designed a multi-platform app called TasKat.\n          </p>\n\n          <p>\n            The app provides an opportunity to improve children’s time\n            management skills by helping their guardians plan their child’s\n            daily activities, communicate with them whenever they are able to,\n            and be notified as their children complete their tasks.\n          </p>\n\n          <h3>Process</h3>\n          <p>\n            Throughout our project, we used Donald Schön's{\" \"}\n            <b>\"reflective practice\"</b>\n            as a guide for our design process, identifying problems and\n            reflecting back on them to improve our work.\n          </p>\n\n          <ImageZoom>\n            <Img\n              fluid={data.cycle.childImageSharp.fluid}\n              alt=\"The reflective cycle\"\n            />\n          </ImageZoom>\n          <figcaption>The Reflective Cycle</figcaption>\n        </div>\n\n        <section className=\"section-blue\">\n          <div className=\"wrap-small\">\n            <h3>Problem</h3>\n\n            <p>\n              <b>Audience:</b> Children aged 8-12 and their guardians whose\n              children stay at home during school hours as a result of the\n              pandemic, requiring guidance and monitoring for completing chores\n              and school-related tasks.\n            </p>\n            <p>\n              <b>Need:</b> Help children plan their tasks and remind them when\n              they are due, notifying the guardians when they are completed.\n            </p>\n\n            <p>\n              <b>Opportunity:</b> How might we help children navigate through\n              the app and manage their tasks without being overhwlemed?\n            </p>\n\n            <p>\n              We looked at similar existing applications, including Bloomz and\n              Child Reward. Our team found them to be complex for children, not\n              providing feedback to users as they completed tasks, and an\n              overall lack of sound design decisions for providing a friendly\n              and engaging experience.\n            </p>\n          </div>\n        </section>\n\n        <section>\n          <div className=\"wrap-small\">\n            <h3>Research</h3>\n            <p>\n              In order to familiarize ourselves with design methods and\n              guidelines for children, I looked at relevant literature to{\" \"}\n              understand <b>how children’s abilities change with age</b>, their\n              interaction with software.\n            </p>\n\n            <p>\n              I identified the mental and intellectual growth level of the\n              children ages 8-12. Since tasks are time bound, we wanted to make\n              sure children are able to understand when they are supposed to\n              complete tasks. Based on a literature review, I found the ability\n              to judge future and past time relative to current time is\n              developed between ages 7 to 10. They also become adept at\n              categorizing items, which we paid special attention to in our\n              design.\n            </p>\n            <p>\n              In order to understand how children might use the software, I\n              planned to adapt Gordon Pask’s <b>“conversation theory”</b> to\n              have potential users externalize their thoughts as they interact\n              with the application. A teach-back scenario could also be\n              arranged, where we would ask the user to{\" \"}\n              <b>\n                teach an imaginary peer how to complete a specific task they\n                have been assigned\n              </b>\n              .\n              <Img\n                fluid={data.companion.childImageSharp.fluid}\n                alt=\"Taskat's onboarding example\"\n                className=\"image-small\"\n              />\n              <figcaption>\n                Example of an onboarding page. The little companion helps users\n                become familiar through a step-by-step process.\n              </figcaption>\n            </p>\n\n            <p>\n              I also looked at Debra Gelman’s book, “Design for Kids”. She wrote\n              that interactions can be complex as long as the children have been\n              taught the more simple operations and methods. To achieve this, an\n              animated character on the screen could teach children how to\n              navigate through the app. We achieved this by including a thorough\n              onboarding experience which included guidance from a virtual cat\n              companion.\n            </p>\n          </div>\n        </section>\n\n        <div className=\"wrap-small\">\n          <h3>Designing the app</h3>\n          <p>\n            After gaining a sufficient understanding of our goals and possible\n            constraints, our team distributed began designing the app on Figma.\n            The main components are designed based on these two goals, which are\n            <b> To Do</b>, <b>Calendar</b>, <b>Fun Feed</b> and <b>Profile</b>{\" \"}\n            views. I worked on the Calendar and Profile views.\n          </p>\n        </div>\n\n        <div className=\"wrap-small\">\n          <div className=\"two-column\">\n            <p>\n              After tasks are added, users are able to have on overview of\n              future and current tasks on the <i>Calendar</i> page, which I\n              designed. Based on the research, I decided to colour code the\n              tasks, making it{\" \"}\n              <b>\n                easy for children to recognize which type of tasks are due for\n                each day\n              </b>\n              .\n            </p>\n\n            <Img\n              fluid={data.calendar.childImageSharp.fluid}\n              alt=\"TasKat's calendar page\"\n            />\n          </div>\n        </div>\n\n        <div className=\"wrap-small\">\n          <div className=\"two-column\">\n            <Img\n              fluid={data.day.childImageSharp.fluid}\n              alt=\"Taskat's day page\"\n            />\n\n            <p>\n              When the users tap on a specific day, they can see tasks that are\n              due on that day. The blue gradient on the left side represents the\n              time of the day (morning, noon, afternoon, night). As the child\n              scrolls down, the colour becomes darker, indicating{\" \"}\n              <b>the passage of time</b>. For younger children, this is a more\n              understandable way of showcasing the difference in time.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"wrap-small\">\n          <div className=\"two-column\">\n            <p>\n              Tapping on a task would show details about the task. This includes\n              the due date of the task, the category it belongs to, and\n              information about the task. In our proposal, we assumed the app\n              could either retrieve information from the school for\n              school-related tasks, or be completed by the guardians.\n            </p>\n            <Img\n              fluid={data.task.childImageSharp.fluid}\n              alt=\"Taskat's specific task page\"\n            />\n          </div>\n        </div>\n\n        <div className=\"wrap-small\">\n          <h3>Reflection and future considerations</h3>\n          <p>\n            TasKat was a great opportunity for me to practice my research and\n            design skills. It allowed me to have an in-depth look at issues in\n            human-computer interaction, make predictions and look for relevant\n            research to test and adjust or inform my design decisions.\n            Throughout the process, I also gained an understanding of Figma and\n            learn how to create a unified user interface and a helpful\n            onboarding. Our team had a great time dealing with challenges,\n            discussing design decisions and reaching our goals. I couldn't have\n            asked for a better team.\n          </p>\n\n          <a\n            href=\"https://www.figma.com/proto/aWN6i3ai1msLZc3HRsB8o9/IAT-351?node-id=186%3A4891&scaling=scale-down\"\n            className=\"visit-website\"\n          >\n            Visit Prototype\n          </a>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default SeedaProject\n\nexport const query = graphql`\n  query {\n    taskatpostHeader: file(relativePath: { eq: \"taskat-project-card.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    cycle: file(relativePath: { eq: \"taskat-cycle.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    companion: file(relativePath: { eq: \"taskat-companion.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    calendar: file(relativePath: { eq: \"taskat-calendar.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    day: file(relativePath: { eq: \"taskat-day.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    task: file(relativePath: { eq: \"taskat-task.png\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}